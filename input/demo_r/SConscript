import sfle
import sys

Import( "*" )

"""
Header
======

Constant and file definitions.
"""

c_strPreTest			= "test_"

c_fileInputDataPCL		= File( sfle.d( fileDirInput, "data.pcl.gz" ) )

c_fileProgData2RData	= File( sfle.d( sfle.c_strDirSrc, "data2rdata.R" ) )
c_fileProgRData2Figure	= File( sfle.d( sfle.c_strDirSrc, "rdata2figure.R" ) )
c_afileProgs			= [c_fileProgData2RData, c_fileProgRData2Figure]

pE = DefaultEnvironment( )

"""
Processing module 1
===================

Generate an intermediate transposed TSV file from the input data,
decompressing, resuffixing, and changing directory automatically.
"""

pProc = sfle.CProcessor( "trn",
	None,
	sfle.CCommand( c_fileProgTranspose ),
	sfle.CTarget( sfle.c_strSufTSV, fileDirTmp ) )
fileTSV = sfle.CProcessor.pipeline( pE, pProc, c_fileInputDataPCL )[0]

"""
Processing modules 2-3
======================

Call two R scripts, one that precalculates and caches the contents
of the intermediate TSV as an RData file, and a second that plots
the RData as the final output PDF (or PNG).
"""

def funcR( target, source, env ):
	strT, astrSs = sfle.ts( target, source )
	strProg, strIn = astrSs[:2]
	return sfle.ex( (strProg, strT, strIn) )

fileRData = File( str(fileTSV).replace( sfle.c_strSufTSV, sfle.c_strSufRData ) )
Command( fileRData, [c_fileProgData2RData, fileTSV], funcR )

filePDF = File( sfle.d( fileDirOutput, sfle.rebase( fileRData, sfle.c_strSufRData, sfle.c_strSufPDF ) ) )
Command( filePDF, [c_fileProgRData2Figure, fileRData], funcR )
Default( filePDF )

"""
Processing module 4
===================

Document each R script as a standard Rd PDF using a wrapper for
the inlinedocs library.
"""

for fileProg in c_afileProgs:
	filePDF = File( sfle.d( fileDirOutput, sfle.rebase( fileProg, sfle.c_strSufR, sfle.c_strSufPDF ) ) )
	sfle.inlinedocs( pE, fileProg, filePDF, fileDirTmp )
	Default( filePDF )

"""
Processing module 5
===================

Test each R script using the testthat library.
"""

for fileProg in c_afileProgs:
# StartTestthat
	fileTXT = File( sfle.d( fileDirOutput, sfle.rebase( fileProg, sfle.c_strSufR, sfle.c_strSufTXT ) ) )
	fileDir = Dir( sfle.d( fileDirSrc, c_strPreTest + sfle.rebase( fileProg, sfle.c_strSufR ) ) )
	sfle.testthat( pE, fileProg, fileDir, fileTXT )
	Default( fileTXT )
# EndTestthat
