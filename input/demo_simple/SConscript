# StartImport
import sfle
import sys

Import( "*" )
# EndImport

"""
Header
======

Constant and file definitions.
"""

# StartConstants
c_strSufPCL				= ".pcl"
c_strSufTSV				= ".tsv"
# EndConstants

# StartInFiles
c_fileInputDataPCL		= File( sfle.d( fileDirInput, "data.pcl" ) )
c_fileInputMetadataPCL	= File( sfle.d( fileDirInput, "metadata.pcl" ) )
# EndInFiles

# StartOutFiles
c_fileNormalizedPCL		= File( sfle.d( fileDirTmp, sfle.rebase( c_fileInputDataPCL ) ) )
c_fileMergedPCL			= File( sfle.d( fileDirOutput, "merged.pcl" ) )
c_fileReportTXT			= File( sfle.d( fileDirOutput, "report.txt" ) )
# EndOutFiles

# StartPrograms
c_fileProgNormalize		= File( sfle.d( sfle.c_strDirSrc, "normalize.py" ) )
c_fileProgReport		= File( sfle.d( sfle.c_strDirSrc, "report.py" ) )
# EndPrograms

# StartEnvironment
pE = DefaultEnvironment( )
# EndEnvironment

"""
Processing module 1
===================

Generate an intermediate normalized PCL file from the input data.
"""

# StartNormalize
sfle.pipe( pE, c_fileInputDataPCL, c_fileProgNormalize, c_fileNormalizedPCL )
# EndNormalize

"""
Processing module 2
===================

Generate intermediate transposed TSV files from the normalized data and the
input metadata.  Store the results in ``afileTSVs`` for convenience, since
A) the filenames are autogenerated, and B) they're provided as inputs to
``merge_tables.py`` below.  
"""

# StartTranspose
afileTSVs = []
for fileIn in (c_fileInputMetadataPCL, c_fileNormalizedPCL):
	fileOut = File( sfle.d( fileDirTmp, sfle.rebase( fileIn, c_strSufPCL, c_strSufTSV ) ) )
	afileTSVs += sfle.pipe( pE, fileIn, c_fileProgTranspose, fileOut )
# EndTranspose

"""
Processing module 3
===================

Generate an intermediate (still transposed) merge file from the transposed data and
metadata.
"""

# StartMerge
fileTSV = File( sfle.d( fileDirTmp, sfle.rebase( c_fileMergedPCL, c_strSufPCL, c_strSufTSV ) ) )
sfle.cmd( pE, c_fileProgMergeTables, fileTSV, [[True, f] for f in afileTSVs] )
# EndMerge

"""
Processing modules 4-5
======================

Create our two main output files, a merged normalized PCL and a plain text
report describing it.  Critical that the report is ``Default``, which
means it will be produced as a target, as will all files it depends on.
"""

# StartOutput
sfle.pipe( pE, fileTSV, c_fileProgTranspose, c_fileMergedPCL )

sfle.pipe( pE, c_fileMergedPCL, c_fileProgReport, c_fileReportTXT )
Default( c_fileReportTXT )
# EndOutput
